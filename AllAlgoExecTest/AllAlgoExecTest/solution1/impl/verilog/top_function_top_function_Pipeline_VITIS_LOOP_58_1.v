// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_function_top_function_Pipeline_VITIS_LOOP_58_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        index,
        visited_2_address0,
        visited_2_ce0,
        visited_2_we0,
        visited_2_d0,
        visited_2_q0,
        visited_2_address1,
        visited_2_ce1,
        visited_2_we1,
        visited_2_d1,
        visited_2_q1,
        stack_1_address0,
        stack_1_ce0,
        stack_1_we0,
        stack_1_d0,
        stack_1_q0,
        p_out,
        p_out_ap_vld,
        adjacencyList_1_address0,
        adjacencyList_1_ce0,
        adjacencyList_1_q0,
        adjacencyList_2_address0,
        adjacencyList_2_ce0,
        adjacencyList_2_q0,
        adjacencyList_3_address0,
        adjacencyList_3_ce0,
        adjacencyList_3_q0,
        adjacencyList_4_address0,
        adjacencyList_4_ce0,
        adjacencyList_4_q0,
        adjacencyList_7_address0,
        adjacencyList_7_ce0,
        adjacencyList_7_q0,
        adjacencyList_11_address0,
        adjacencyList_11_ce0,
        adjacencyList_11_q0,
        adjacencyList_13_address0,
        adjacencyList_13_ce0,
        adjacencyList_13_q0,
        adjacencyList_15_address0,
        adjacencyList_15_ce0,
        adjacencyList_15_q0,
        adjacencyList_16_address0,
        adjacencyList_16_ce0,
        adjacencyList_16_q0,
        traversalSize_i,
        traversalSize_o,
        traversalSize_o_ap_vld,
        allTraversal_address0,
        allTraversal_ce0,
        allTraversal_we0,
        allTraversal_d0,
        adjacencyList_18_address0,
        adjacencyList_18_ce0,
        adjacencyList_18_q0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] index;
output  [4:0] visited_2_address0;
output   visited_2_ce0;
output   visited_2_we0;
output  [0:0] visited_2_d0;
input  [0:0] visited_2_q0;
output  [4:0] visited_2_address1;
output   visited_2_ce1;
output   visited_2_we1;
output  [0:0] visited_2_d1;
input  [0:0] visited_2_q1;
output  [4:0] stack_1_address0;
output   stack_1_ce0;
output   stack_1_we0;
output  [4:0] stack_1_d0;
input  [4:0] stack_1_q0;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [4:0] adjacencyList_1_address0;
output   adjacencyList_1_ce0;
input  [0:0] adjacencyList_1_q0;
output  [4:0] adjacencyList_2_address0;
output   adjacencyList_2_ce0;
input  [0:0] adjacencyList_2_q0;
output  [4:0] adjacencyList_3_address0;
output   adjacencyList_3_ce0;
input  [0:0] adjacencyList_3_q0;
output  [4:0] adjacencyList_4_address0;
output   adjacencyList_4_ce0;
input  [0:0] adjacencyList_4_q0;
output  [4:0] adjacencyList_7_address0;
output   adjacencyList_7_ce0;
input  [0:0] adjacencyList_7_q0;
output  [4:0] adjacencyList_11_address0;
output   adjacencyList_11_ce0;
input  [0:0] adjacencyList_11_q0;
output  [4:0] adjacencyList_13_address0;
output   adjacencyList_13_ce0;
input  [0:0] adjacencyList_13_q0;
output  [4:0] adjacencyList_15_address0;
output   adjacencyList_15_ce0;
input  [0:0] adjacencyList_15_q0;
output  [4:0] adjacencyList_16_address0;
output   adjacencyList_16_ce0;
input  [0:0] adjacencyList_16_q0;
input  [31:0] traversalSize_i;
output  [31:0] traversalSize_o;
output   traversalSize_o_ap_vld;
output  [4:0] allTraversal_address0;
output   allTraversal_ce0;
output   allTraversal_we0;
output  [4:0] allTraversal_d0;
output  [4:0] adjacencyList_18_address0;
output   adjacencyList_18_ce0;
input  [0:0] adjacencyList_18_q0;

reg ap_idle;
reg[4:0] visited_2_address0;
reg visited_2_ce0;
reg visited_2_we0;
reg[4:0] visited_2_address1;
reg visited_2_ce1;
reg visited_2_we1;
reg[4:0] stack_1_address0;
reg stack_1_ce0;
reg stack_1_we0;
reg[4:0] stack_1_d0;
reg p_out_ap_vld;
reg adjacencyList_1_ce0;
reg adjacencyList_2_ce0;
reg adjacencyList_3_ce0;
reg adjacencyList_4_ce0;
reg adjacencyList_7_ce0;
reg adjacencyList_11_ce0;
reg adjacencyList_13_ce0;
reg adjacencyList_15_ce0;
reg adjacencyList_16_ce0;
reg[31:0] traversalSize_o;
reg traversalSize_o_ap_vld;
reg allTraversal_ce0;
reg allTraversal_we0;
reg adjacencyList_18_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln58_fu_592_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state13;
wire    ap_block_state13_pp0_stage12_iter0;
reg   [31:0] top_6_3_reg_456;
reg   [31:0] top_6_6_reg_483;
reg   [31:0] top_6_8_reg_497;
reg   [31:0] top_6_17_reg_552;
reg   [31:0] top_3_reg_769;
reg   [0:0] icmp_ln58_reg_825;
reg   [4:0] stack_1_addr_reg_829;
reg   [31:0] traversalSize_load_reg_834;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [31:0] top_4_fu_626_p2;
reg   [31:0] top_4_reg_889;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [31:0] add_ln60_fu_631_p2;
reg   [31:0] add_ln60_reg_895;
reg   [0:0] adjacencyList_18_load_reg_900;
reg   [0:0] adjacencyList_16_load_reg_904;
reg   [0:0] adjacencyList_15_load_reg_908;
reg   [0:0] adjacencyList_13_load_reg_912;
reg   [0:0] adjacencyList_11_load_reg_916;
reg   [0:0] adjacencyList_7_load_reg_920;
reg   [0:0] adjacencyList_4_load_reg_924;
reg   [0:0] adjacencyList_3_load_reg_928;
reg   [0:0] adjacencyList_2_load_reg_932;
reg   [0:0] adjacencyList_1_load_reg_936;
reg   [0:0] visited_2_load_reg_940;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [0:0] visited_2_load_1_reg_944;
wire   [31:0] add_ln65_fu_642_p2;
reg   [31:0] add_ln65_reg_948;
reg   [0:0] visited_2_load_2_reg_953;
wire    ap_CS_fsm_state5;
wire    ap_block_state5_pp0_stage4_iter0;
wire   [31:0] add_ln65_1_fu_653_p2;
reg   [31:0] add_ln65_1_reg_957;
reg   [0:0] visited_2_load_3_reg_962;
wire   [31:0] add_ln65_2_fu_660_p2;
reg   [31:0] add_ln65_2_reg_966;
reg   [0:0] visited_2_load_4_reg_971;
wire    ap_CS_fsm_state6;
wire    ap_block_state6_pp0_stage5_iter0;
reg   [0:0] visited_2_load_5_reg_975;
wire   [31:0] add_ln65_3_fu_675_p2;
reg   [31:0] add_ln65_3_reg_979;
wire    ap_CS_fsm_state7;
wire    ap_block_state7_pp0_stage6_iter0;
reg   [0:0] visited_2_load_6_reg_985;
reg   [0:0] visited_2_load_7_reg_989;
reg   [0:0] visited_2_load_8_reg_993;
wire    ap_CS_fsm_state8;
wire    ap_block_state8_pp0_stage7_iter0;
reg   [0:0] visited_2_load_9_reg_997;
wire   [31:0] add_ln65_4_fu_685_p2;
reg   [31:0] add_ln65_4_reg_1001;
wire    ap_CS_fsm_state9;
wire    ap_block_state9_pp0_stage8_iter0;
wire   [31:0] add_ln65_5_fu_696_p2;
reg   [31:0] add_ln65_5_reg_1006;
wire    ap_CS_fsm_state10;
wire    ap_block_state10_pp0_stage9_iter0;
wire   [31:0] add_ln65_6_fu_707_p2;
wire    ap_CS_fsm_state11;
wire    ap_block_state11_pp0_stage10_iter0;
reg   [31:0] ap_phi_mux_top_6_1_phi_fu_448_p6;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_1_reg_445;
reg   [31:0] ap_phi_mux_top_6_3_phi_fu_459_p6;
wire   [31:0] ap_phi_reg_pp0_iter0_top_6_3_reg_456;
reg   [31:0] ap_phi_mux_top_6_4_phi_fu_473_p6;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_4_reg_470;
reg   [31:0] ap_phi_mux_top_6_6_phi_fu_486_p6;
wire   [31:0] ap_phi_reg_pp0_iter0_top_6_6_reg_483;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_8_reg_497;
reg   [31:0] ap_phi_mux_top_6_12_phi_fu_514_p6;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_12_reg_511;
reg   [31:0] ap_phi_mux_top_6_15_phi_fu_528_p6;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_15_reg_525;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_16_reg_539;
wire    ap_CS_fsm_state12;
wire    ap_block_state12_pp0_stage11_iter0;
reg   [31:0] ap_phi_mux_top_6_17_phi_fu_555_p6;
wire   [31:0] add_ln65_7_fu_718_p2;
wire   [31:0] ap_phi_reg_pp0_iter0_top_6_17_reg_552;
reg   [31:0] ap_phi_mux_top_6_18_phi_fu_569_p6;
wire   [31:0] add_ln65_8_fu_730_p2;
reg   [31:0] ap_phi_reg_pp0_iter0_top_6_18_reg_566;
wire   [63:0] zext_ln59_fu_598_p1;
wire   [63:0] zext_ln60_fu_607_p1;
wire   [63:0] idxprom9_i_cast_fu_612_p1;
wire   [63:0] zext_ln65_fu_649_p1;
wire   [63:0] zext_ln65_1_fu_667_p1;
wire   [63:0] zext_ln65_2_fu_671_p1;
wire   [63:0] zext_ln65_3_fu_681_p1;
wire   [63:0] zext_ln65_4_fu_691_p1;
wire   [63:0] zext_ln65_5_fu_702_p1;
wire   [63:0] zext_ln65_6_fu_713_p1;
wire   [63:0] zext_ln65_7_fu_725_p1;
wire   [63:0] zext_ln65_8_fu_737_p1;
reg   [31:0] empty_fu_94;
wire    ap_loop_init;
reg   [31:0] top_fu_98;
reg   [31:0] ap_sig_allocacmp_top_3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_start_int;
reg    ap_condition_760;
reg    ap_condition_765;
reg    ap_condition_769;
reg    ap_condition_773;
reg    ap_condition_777;
reg    ap_condition_781;
reg    ap_condition_784;
reg    ap_condition_788;
reg    ap_condition_792;
reg    ap_condition_796;
reg    ap_condition_800;
reg    ap_condition_804;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_done_reg = 1'b0;
end

top_function_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (1'd0 == adjacencyList_3_load_reg_928) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_reg_pp0_iter0_top_6_16_reg_539 <= ap_phi_mux_top_6_15_phi_fu_528_p6;
    end else if (((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_reg_pp0_iter0_top_6_16_reg_539 <= add_ln65_6_fu_707_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((icmp_ln58_reg_825 == 1'd0)) begin
        if ((1'b1 == ap_condition_765)) begin
            ap_phi_reg_pp0_iter0_top_6_8_reg_497 <= top_6_6_reg_483;
        end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == adjacencyList_11_load_reg_916))) begin
            ap_phi_reg_pp0_iter0_top_6_8_reg_497 <= ap_phi_mux_top_6_6_phi_fu_486_p6;
        end else if ((1'b1 == ap_condition_760)) begin
            ap_phi_reg_pp0_iter0_top_6_8_reg_497 <= add_ln65_3_fu_675_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_fu_94 <= index;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln58_reg_825 == 1'd0))) begin
        empty_fu_94 <= add_ln60_reg_895;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'd0 == adjacencyList_2_load_reg_932) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)))) begin
        top_6_17_reg_552 <= ap_phi_reg_pp0_iter0_top_6_16_reg_539;
    end else if (((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0))) begin
        top_6_17_reg_552 <= add_ln65_7_fu_718_p2;
    end else if ((~(icmp_ln58_reg_825 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        top_6_17_reg_552 <= ap_phi_reg_pp0_iter0_top_6_17_reg_552;
    end
end

always @ (posedge ap_clk) begin
    if ((((visited_2_q0 == 1'd1) & (1'd1 == adjacencyList_16_load_reg_904) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (1'd0 == adjacencyList_16_load_reg_904) & (icmp_ln58_reg_825 == 1'd0)))) begin
        top_6_3_reg_456 <= ap_phi_mux_top_6_1_phi_fu_448_p6;
    end else if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_16_load_reg_904) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0))) begin
        top_6_3_reg_456 <= add_ln65_fu_642_p2;
    end else if ((~(icmp_ln58_reg_825 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        top_6_3_reg_456 <= ap_phi_reg_pp0_iter0_top_6_3_reg_456;
    end
end

always @ (posedge ap_clk) begin
    if ((((visited_2_q0 == 1'd1) & (1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == adjacencyList_13_load_reg_912) & (icmp_ln58_reg_825 == 1'd0)))) begin
        top_6_6_reg_483 <= ap_phi_mux_top_6_4_phi_fu_473_p6;
    end else if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        top_6_6_reg_483 <= add_ln65_2_fu_660_p2;
    end else if ((~(icmp_ln58_reg_825 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        top_6_6_reg_483 <= ap_phi_reg_pp0_iter0_top_6_6_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        top_fu_98 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln58_reg_825 == 1'd0))) begin
        top_fu_98 <= ap_phi_mux_top_6_18_phi_fu_569_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln60_reg_895 <= add_ln60_fu_631_p2;
        adjacencyList_11_load_reg_916 <= adjacencyList_11_q0;
        adjacencyList_13_load_reg_912 <= adjacencyList_13_q0;
        adjacencyList_15_load_reg_908 <= adjacencyList_15_q0;
        adjacencyList_16_load_reg_904 <= adjacencyList_16_q0;
        adjacencyList_18_load_reg_900 <= adjacencyList_18_q0;
        adjacencyList_1_load_reg_936 <= adjacencyList_1_q0;
        adjacencyList_2_load_reg_932 <= adjacencyList_2_q0;
        adjacencyList_3_load_reg_928 <= adjacencyList_3_q0;
        adjacencyList_4_load_reg_924 <= adjacencyList_4_q0;
        adjacencyList_7_load_reg_920 <= adjacencyList_7_q0;
        top_4_reg_889 <= top_4_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((visited_2_q1 == 1'd0) & (1'd1 == adjacencyList_15_load_reg_908) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_1_reg_957 <= add_ln65_1_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_2_reg_966 <= add_ln65_2_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_3_reg_979 <= add_ln65_3_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_4_reg_1001 <= add_ln65_4_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_5_reg_1006 <= add_ln65_5_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_16_load_reg_904) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0))) begin
        add_ln65_reg_948 <= add_ln65_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd0 == adjacencyList_7_load_reg_920) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_reg_pp0_iter0_top_6_12_reg_511 <= ap_phi_reg_pp0_iter0_top_6_8_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (1'd0 == adjacencyList_4_load_reg_924) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_reg_pp0_iter0_top_6_15_reg_525 <= ap_phi_mux_top_6_12_phi_fu_514_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state12) & (1'd0 == adjacencyList_1_load_reg_936) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_reg_pp0_iter0_top_6_18_reg_566 <= ap_phi_mux_top_6_17_phi_fu_555_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == adjacencyList_18_q0))) begin
        ap_phi_reg_pp0_iter0_top_6_1_reg_445 <= top_4_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == adjacencyList_15_load_reg_908) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_reg_pp0_iter0_top_6_4_reg_470 <= ap_phi_mux_top_6_3_phi_fu_459_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln58_reg_825 <= icmp_ln58_fu_592_p2;
        top_3_reg_769 <= ap_sig_allocacmp_top_3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (icmp_ln58_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        stack_1_addr_reg_829 <= zext_ln59_fu_598_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        top_6_8_reg_497 <= ap_phi_reg_pp0_iter0_top_6_8_reg_497;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        traversalSize_load_reg_834 <= traversalSize_i;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_16_load_reg_904) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_1_reg_944 <= visited_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_15_load_reg_908) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_2_reg_953 <= visited_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_3_reg_962 <= visited_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_11_load_reg_916) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_4_reg_971 <= visited_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_7_load_reg_920) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_5_reg_975 <= visited_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_4_load_reg_924) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_6_reg_985 <= visited_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_3_load_reg_928) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_7_reg_989 <= visited_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_2_load_reg_932) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_8_reg_993 <= visited_2_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_1_load_reg_936) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_9_reg_997 <= visited_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == adjacencyList_18_load_reg_900) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0))) begin
        visited_2_load_reg_940 <= visited_2_q1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_11_ce0 = 1'b1;
    end else begin
        adjacencyList_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_13_ce0 = 1'b1;
    end else begin
        adjacencyList_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_15_ce0 = 1'b1;
    end else begin
        adjacencyList_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_16_ce0 = 1'b1;
    end else begin
        adjacencyList_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_18_ce0 = 1'b1;
    end else begin
        adjacencyList_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_1_ce0 = 1'b1;
    end else begin
        adjacencyList_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_2_ce0 = 1'b1;
    end else begin
        adjacencyList_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_3_ce0 = 1'b1;
    end else begin
        adjacencyList_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_4_ce0 = 1'b1;
    end else begin
        adjacencyList_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        adjacencyList_7_ce0 = 1'b1;
    end else begin
        adjacencyList_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        allTraversal_ce0 = 1'b1;
    end else begin
        allTraversal_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        allTraversal_we0 = 1'b1;
    end else begin
        allTraversal_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln58_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_12_phi_fu_514_p6 = add_ln65_4_reg_1001;
    end else begin
        ap_phi_mux_top_6_12_phi_fu_514_p6 = ap_phi_reg_pp0_iter0_top_6_12_reg_511;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_15_phi_fu_528_p6 = add_ln65_5_reg_1006;
    end else begin
        ap_phi_mux_top_6_15_phi_fu_528_p6 = ap_phi_reg_pp0_iter0_top_6_15_reg_525;
    end
end

always @ (*) begin
    if ((((1'd0 == adjacencyList_2_load_reg_932) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd1) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_mux_top_6_17_phi_fu_555_p6 = ap_phi_reg_pp0_iter0_top_6_16_reg_539;
    end else if (((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_17_phi_fu_555_p6 = add_ln65_7_fu_718_p2;
    end else begin
        ap_phi_mux_top_6_17_phi_fu_555_p6 = ap_phi_reg_pp0_iter0_top_6_17_reg_552;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_18_phi_fu_569_p6 = add_ln65_8_fu_730_p2;
    end else begin
        ap_phi_mux_top_6_18_phi_fu_569_p6 = ap_phi_reg_pp0_iter0_top_6_18_reg_566;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_18_load_reg_900) & (icmp_ln58_reg_825 == 1'd0))) begin
        if ((visited_2_q1 == 1'd1)) begin
            ap_phi_mux_top_6_1_phi_fu_448_p6 = top_4_reg_889;
        end else if ((visited_2_q1 == 1'd0)) begin
            ap_phi_mux_top_6_1_phi_fu_448_p6 = top_3_reg_769;
        end else begin
            ap_phi_mux_top_6_1_phi_fu_448_p6 = ap_phi_reg_pp0_iter0_top_6_1_reg_445;
        end
    end else begin
        ap_phi_mux_top_6_1_phi_fu_448_p6 = ap_phi_reg_pp0_iter0_top_6_1_reg_445;
    end
end

always @ (*) begin
    if ((((visited_2_q0 == 1'd1) & (1'd1 == adjacencyList_16_load_reg_904) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd0 == adjacencyList_16_load_reg_904) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_mux_top_6_3_phi_fu_459_p6 = ap_phi_mux_top_6_1_phi_fu_448_p6;
    end else if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_16_load_reg_904) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_3_phi_fu_459_p6 = add_ln65_fu_642_p2;
    end else begin
        ap_phi_mux_top_6_3_phi_fu_459_p6 = ap_phi_reg_pp0_iter0_top_6_3_reg_456;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_15_load_reg_908) & (icmp_ln58_reg_825 == 1'd0))) begin
        if ((visited_2_q1 == 1'd1)) begin
            ap_phi_mux_top_6_4_phi_fu_473_p6 = top_6_3_reg_456;
        end else if ((visited_2_q1 == 1'd0)) begin
            ap_phi_mux_top_6_4_phi_fu_473_p6 = add_ln65_1_fu_653_p2;
        end else begin
            ap_phi_mux_top_6_4_phi_fu_473_p6 = ap_phi_reg_pp0_iter0_top_6_4_reg_470;
        end
    end else begin
        ap_phi_mux_top_6_4_phi_fu_473_p6 = ap_phi_reg_pp0_iter0_top_6_4_reg_470;
    end
end

always @ (*) begin
    if ((((1'd0 == adjacencyList_13_load_reg_912) & (icmp_ln58_reg_825 == 1'd0)) | ((visited_2_q0 == 1'd1) & (1'd1 == adjacencyList_13_load_reg_912) & (icmp_ln58_reg_825 == 1'd0)))) begin
        ap_phi_mux_top_6_6_phi_fu_486_p6 = ap_phi_mux_top_6_4_phi_fu_473_p6;
    end else if (((visited_2_q0 == 1'd0) & (1'd1 == adjacencyList_13_load_reg_912) & (icmp_ln58_reg_825 == 1'd0))) begin
        ap_phi_mux_top_6_6_phi_fu_486_p6 = add_ln65_2_fu_660_p2;
    end else begin
        ap_phi_mux_top_6_6_phi_fu_486_p6 = ap_phi_reg_pp0_iter0_top_6_6_reg_483;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_top_3 = 32'd0;
    end else begin
        ap_sig_allocacmp_top_3 = top_fu_98;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln58_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_8_fu_737_p1;
    end else if (((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_7_fu_725_p1;
    end else if (((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_6_fu_713_p1;
    end else if (((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_5_fu_702_p1;
    end else if (((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_4_fu_691_p1;
    end else if (((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_3_fu_681_p1;
    end else if (((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_2_fu_671_p1;
    end else if (((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_1_fu_667_p1;
    end else if (((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = zext_ln65_fu_649_p1;
    end else if (((visited_2_q1 == 1'd0) & (1'd1 == adjacencyList_18_load_reg_900) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0))) begin
        stack_1_address0 = stack_1_addr_reg_829;
    end else if (((icmp_ln58_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        stack_1_address0 = zext_ln59_fu_598_p1;
    end else begin
        stack_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start_int == 1'b1) & (icmp_ln58_fu_592_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state7) 
    & (icmp_ln58_reg_825 == 1'd0)) | ((visited_2_q1 == 1'd0) & (1'd1 == adjacencyList_18_load_reg_900) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)))) begin
        stack_1_ce0 = 1'b1;
    end else begin
        stack_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln58_reg_825 == 1'd0)) begin
        if ((1'b1 == ap_condition_804)) begin
            stack_1_d0 = 5'd1;
        end else if ((1'b1 == ap_condition_800)) begin
            stack_1_d0 = 5'd2;
        end else if ((1'b1 == ap_condition_796)) begin
            stack_1_d0 = 5'd3;
        end else if ((1'b1 == ap_condition_792)) begin
            stack_1_d0 = 5'd4;
        end else if ((1'b1 == ap_condition_788)) begin
            stack_1_d0 = 5'd7;
        end else if ((1'b1 == ap_condition_784)) begin
            stack_1_d0 = 5'd11;
        end else if ((1'b1 == ap_condition_781)) begin
            stack_1_d0 = 5'd13;
        end else if ((1'b1 == ap_condition_777)) begin
            stack_1_d0 = 5'd15;
        end else if ((1'b1 == ap_condition_773)) begin
            stack_1_d0 = 5'd16;
        end else if ((1'b1 == ap_condition_769)) begin
            stack_1_d0 = 5'd18;
        end else begin
            stack_1_d0 = 'bx;
        end
    end else begin
        stack_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0)) | ((visited_2_q1 == 1'd0) & (1'd1 == adjacencyList_18_load_reg_900) 
    & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)))) begin
        stack_1_we0 = 1'b1;
    end else begin
        stack_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        traversalSize_o = add_ln60_fu_631_p2;
    end else begin
        traversalSize_o = traversalSize_i;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        traversalSize_o_ap_vld = 1'b1;
    end else begin
        traversalSize_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_1_load_reg_936) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address0 = 64'd1;
    end else if ((((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address0 = 64'd3;
    end else if ((((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address0 = 64'd7;
    end else if ((((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address0 = 64'd13;
    end else if ((((1'd1 == adjacencyList_16_q0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address0 = 64'd16;
    end else begin
        visited_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address1 = 64'd2;
    end else if ((((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address1 = 64'd4;
    end else if ((((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address1 = 64'd11;
    end else if ((((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address1 = 64'd15;
    end else if ((((1'd1 == adjacencyList_18_q0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == adjacencyList_18_load_reg_900) & (visited_2_load_reg_940 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_address1 = 64'd18;
    end else begin
        visited_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_16_q0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_1_load_reg_936) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 1'd0)) 
    | ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_ce0 = 1'b1;
    end else begin
        visited_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_18_q0) & (1'b1 == ap_CS_fsm_state3)) | ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_2_load_reg_932) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln58_reg_825 == 
    1'd0)) | ((1'd1 == adjacencyList_18_load_reg_900) & (visited_2_load_reg_940 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_ce1 = 1'b1;
    end else begin
        visited_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_we0 = 1'b1;
    end else begin
        visited_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln58_reg_825 == 1'd0)) | ((1'd1 == adjacencyList_18_load_reg_900) & (visited_2_load_reg_940 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln58_reg_825 == 1'd0)))) begin
        visited_2_we1 = 1'b1;
    end else begin
        visited_2_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start_int == 1'b1) & (icmp_ln58_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln60_fu_631_p2 = (traversalSize_load_reg_834 + 32'd1);

assign add_ln65_1_fu_653_p2 = (top_6_3_reg_456 + 32'd1);

assign add_ln65_2_fu_660_p2 = (ap_phi_mux_top_6_4_phi_fu_473_p6 + 32'd1);

assign add_ln65_3_fu_675_p2 = (top_6_6_reg_483 + 32'd1);

assign add_ln65_4_fu_685_p2 = (top_6_8_reg_497 + 32'd1);

assign add_ln65_5_fu_696_p2 = (ap_phi_mux_top_6_12_phi_fu_514_p6 + 32'd1);

assign add_ln65_6_fu_707_p2 = (ap_phi_mux_top_6_15_phi_fu_528_p6 + 32'd1);

assign add_ln65_7_fu_718_p2 = (ap_phi_reg_pp0_iter0_top_6_16_reg_539 + 32'd1);

assign add_ln65_8_fu_730_p2 = (top_6_17_reg_552 + 32'd1);

assign add_ln65_fu_642_p2 = (ap_phi_mux_top_6_1_phi_fu_448_p6 + 32'd1);

assign adjacencyList_11_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_13_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_15_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_16_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_18_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_1_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_2_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_3_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_4_address0 = idxprom9_i_cast_fu_612_p1;

assign adjacencyList_7_address0 = idxprom9_i_cast_fu_612_p1;

assign allTraversal_address0 = zext_ln60_fu_607_p1;

assign allTraversal_d0 = stack_1_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_760 = ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state7));
end

always @ (*) begin
    ap_condition_765 = ((visited_2_q1 == 1'd1) & (1'd1 == adjacencyList_11_load_reg_916) & (1'b1 == ap_CS_fsm_state6));
end

always @ (*) begin
    ap_condition_769 = ((visited_2_q1 == 1'd0) & (1'd1 == adjacencyList_18_load_reg_900) & (1'b1 == ap_CS_fsm_state4));
end

always @ (*) begin
    ap_condition_773 = ((1'd1 == adjacencyList_16_load_reg_904) & (visited_2_load_1_reg_944 == 1'd0) & (1'b1 == ap_CS_fsm_state5));
end

always @ (*) begin
    ap_condition_777 = ((1'd1 == adjacencyList_15_load_reg_908) & (visited_2_load_2_reg_953 == 1'd0) & (1'b1 == ap_CS_fsm_state6));
end

always @ (*) begin
    ap_condition_781 = ((1'd1 == adjacencyList_13_load_reg_912) & (visited_2_load_3_reg_962 == 1'd0) & (1'b1 == ap_CS_fsm_state7));
end

always @ (*) begin
    ap_condition_784 = ((1'd1 == adjacencyList_11_load_reg_916) & (visited_2_load_4_reg_971 == 1'd0) & (1'b1 == ap_CS_fsm_state8));
end

always @ (*) begin
    ap_condition_788 = ((1'd1 == adjacencyList_7_load_reg_920) & (visited_2_load_5_reg_975 == 1'd0) & (1'b1 == ap_CS_fsm_state9));
end

always @ (*) begin
    ap_condition_792 = ((1'd1 == adjacencyList_4_load_reg_924) & (visited_2_load_6_reg_985 == 1'd0) & (1'b1 == ap_CS_fsm_state10));
end

always @ (*) begin
    ap_condition_796 = ((1'd1 == adjacencyList_3_load_reg_928) & (visited_2_load_7_reg_989 == 1'd0) & (1'b1 == ap_CS_fsm_state11));
end

always @ (*) begin
    ap_condition_800 = ((1'd1 == adjacencyList_2_load_reg_932) & (visited_2_load_8_reg_993 == 1'd0) & (1'b1 == ap_CS_fsm_state12));
end

always @ (*) begin
    ap_condition_804 = ((1'd1 == adjacencyList_1_load_reg_936) & (visited_2_load_9_reg_997 == 1'd0) & (1'b1 == ap_CS_fsm_state13));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_top_6_17_reg_552 = 'bx;

assign ap_phi_reg_pp0_iter0_top_6_3_reg_456 = 'bx;

assign ap_phi_reg_pp0_iter0_top_6_6_reg_483 = 'bx;

assign icmp_ln58_fu_592_p2 = ((ap_sig_allocacmp_top_3 == 32'd4294967295) ? 1'b1 : 1'b0);

assign idxprom9_i_cast_fu_612_p1 = stack_1_q0;

assign p_out = empty_fu_94;

assign top_4_fu_626_p2 = ($signed(top_3_reg_769) + $signed(32'd4294967295));

assign visited_2_d0 = 1'd1;

assign visited_2_d1 = 1'd1;

assign zext_ln59_fu_598_p1 = ap_sig_allocacmp_top_3;

assign zext_ln60_fu_607_p1 = traversalSize_i;

assign zext_ln65_1_fu_667_p1 = add_ln65_1_reg_957;

assign zext_ln65_2_fu_671_p1 = add_ln65_2_reg_966;

assign zext_ln65_3_fu_681_p1 = add_ln65_3_reg_979;

assign zext_ln65_4_fu_691_p1 = add_ln65_4_fu_685_p2;

assign zext_ln65_5_fu_702_p1 = add_ln65_5_fu_696_p2;

assign zext_ln65_6_fu_713_p1 = add_ln65_6_fu_707_p2;

assign zext_ln65_7_fu_725_p1 = add_ln65_7_fu_718_p2;

assign zext_ln65_8_fu_737_p1 = add_ln65_8_fu_730_p2;

assign zext_ln65_fu_649_p1 = add_ln65_reg_948;

endmodule //top_function_top_function_Pipeline_VITIS_LOOP_58_1
