#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_set>
#include <unordered_map>
#include <algorithm>

// Represents a graph as adjacency lists
class Graph {
public:
    std::unordered_map<int, std::vector<int>> adjacencyLists;
    std::unordered_set<int> vertices;

    void addEdge(int u, int v) {
        vertices.insert(u);
        vertices.insert(v);

        adjacencyLists[u].push_back(v);
        // uncomment below line for undirected graph
        // adjacencyLists[v].push_back(u);
    }

    void printCompressed() {
        std::ofstream file("compressed_graph.txt");

        file << "Vertices:\n";
        for (int vertex : vertices) {
            file << vertex << " ";
        }
        file << "\nAdjacency Lists:\n";
        for (const auto& list : adjacencyLists) {
            file << list.first << ": ";
            for (int v : list.second) {
                file << v << " ";
            }
            file << "\n";
        }

        file.close();
    }

    void decompressAndPrint() {
        std::ofstream file("decompressed_graph.txt");

        file << "Edges:\n";
        for (const auto& list : adjacencyLists) {
            for (int v : list.second) {
                file << "(" << list.first << "," << v << ") ";
            }
            file << "\n";
        }

        file.close();
    }
};

int main() {
    std::ifstream file("input_graph.txt");
    Graph graph;

    int u, v;
    while (file >> u >> v) {
        graph.addEdge(u, v);
    }

    file.close();

    graph.printCompressed();
    graph.decompressAndPrint();

    return 0;
}
